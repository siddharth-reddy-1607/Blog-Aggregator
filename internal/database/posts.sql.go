// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts(id,created_at,updated_at,title,url,description,published_at,feed_id)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8)
RETURNING id, created_at, updated_at, title, url, description, published_at, feed_id
`

type CreatePostParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Url         string
	Description string
	PublishedAt time.Time
	FeedID      uuid.UUID
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Url,
		arg.Description,
		arg.PublishedAt,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Url,
		&i.Description,
		&i.PublishedAt,
		&i.FeedID,
	)
	return i, err
}

const getPosts = `-- name: GetPosts :many
SELECT feeds.url AS "feed_url",sub_two.id,sub_two.title,sub_two.description,sub_two.url,sub_two.published_at FROM
    feeds INNER JOIN
    (SELECT posts.id,posts.title,posts.description,posts.url,posts.published_at,posts.feed_id FROM
        posts INNER JOIN 
        (SELECT id, user_id, feed_id, created_at, updated_at FROM feed_follows
        WHERE feed_follows.user_id = $1) sub_one
        ON posts.feed_id = sub_one.feed_id) sub_two
    ON feeds.id = sub_two.feed_id
ORDER BY sub_two.published_at DESC
LIMIT $2
`

type GetPostsParams struct {
	UserID uuid.UUID
	Limit  int32
}

type GetPostsRow struct {
	FeedUrl     string
	ID          uuid.UUID
	Title       string
	Description string
	Url         string
	PublishedAt time.Time
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]GetPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.UserID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsRow
	for rows.Next() {
		var i GetPostsRow
		if err := rows.Scan(
			&i.FeedUrl,
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Url,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
